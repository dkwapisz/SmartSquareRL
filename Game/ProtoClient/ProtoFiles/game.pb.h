// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
namespace GameMessage {
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
}  // namespace GameMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::GameMessage::Action* Arena::CreateMaybeMessage<::GameMessage::Action>(Arena*);
template<> ::GameMessage::GameState* Arena::CreateMaybeMessage<::GameMessage::GameState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GameMessage {

enum GameState_ObjectDirection : int {
  GameState_ObjectDirection_DEFAULT = 0,
  GameState_ObjectDirection_UP = 1,
  GameState_ObjectDirection_RIGHT = 2,
  GameState_ObjectDirection_DOWN = 3,
  GameState_ObjectDirection_LEFT = 4,
  GameState_ObjectDirection_NOT_EXIST = 5,
  GameState_ObjectDirection_GameState_ObjectDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GameState_ObjectDirection_GameState_ObjectDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GameState_ObjectDirection_IsValid(int value);
constexpr GameState_ObjectDirection GameState_ObjectDirection_ObjectDirection_MIN = GameState_ObjectDirection_DEFAULT;
constexpr GameState_ObjectDirection GameState_ObjectDirection_ObjectDirection_MAX = GameState_ObjectDirection_NOT_EXIST;
constexpr int GameState_ObjectDirection_ObjectDirection_ARRAYSIZE = GameState_ObjectDirection_ObjectDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_ObjectDirection_descriptor();
template<typename T>
inline const std::string& GameState_ObjectDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameState_ObjectDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameState_ObjectDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameState_ObjectDirection_descriptor(), enum_t_value);
}
inline bool GameState_ObjectDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameState_ObjectDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameState_ObjectDirection>(
    GameState_ObjectDirection_descriptor(), name, value);
}
enum Action_ActionDirection : int {
  Action_ActionDirection_DEFAULT = 0,
  Action_ActionDirection_UP = 1,
  Action_ActionDirection_RIGHT = 2,
  Action_ActionDirection_DOWN = 3,
  Action_ActionDirection_LEFT = 4,
  Action_ActionDirection_IDLE = 5,
  Action_ActionDirection_Action_ActionDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Action_ActionDirection_Action_ActionDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Action_ActionDirection_IsValid(int value);
constexpr Action_ActionDirection Action_ActionDirection_ActionDirection_MIN = Action_ActionDirection_DEFAULT;
constexpr Action_ActionDirection Action_ActionDirection_ActionDirection_MAX = Action_ActionDirection_IDLE;
constexpr int Action_ActionDirection_ActionDirection_ARRAYSIZE = Action_ActionDirection_ActionDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_ActionDirection_descriptor();
template<typename T>
inline const std::string& Action_ActionDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action_ActionDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_ActionDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_ActionDirection_descriptor(), enum_t_value);
}
inline bool Action_ActionDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Action_ActionDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action_ActionDirection>(
    Action_ActionDirection_descriptor(), name, value);
}
// ===================================================================

class GameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameMessage.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit constexpr GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameMessage.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameState_ObjectDirection ObjectDirection;
  static constexpr ObjectDirection DEFAULT =
    GameState_ObjectDirection_DEFAULT;
  static constexpr ObjectDirection UP =
    GameState_ObjectDirection_UP;
  static constexpr ObjectDirection RIGHT =
    GameState_ObjectDirection_RIGHT;
  static constexpr ObjectDirection DOWN =
    GameState_ObjectDirection_DOWN;
  static constexpr ObjectDirection LEFT =
    GameState_ObjectDirection_LEFT;
  static constexpr ObjectDirection NOT_EXIST =
    GameState_ObjectDirection_NOT_EXIST;
  static inline bool ObjectDirection_IsValid(int value) {
    return GameState_ObjectDirection_IsValid(value);
  }
  static constexpr ObjectDirection ObjectDirection_MIN =
    GameState_ObjectDirection_ObjectDirection_MIN;
  static constexpr ObjectDirection ObjectDirection_MAX =
    GameState_ObjectDirection_ObjectDirection_MAX;
  static constexpr int ObjectDirection_ARRAYSIZE =
    GameState_ObjectDirection_ObjectDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectDirection_descriptor() {
    return GameState_ObjectDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectDirection_Name.");
    return GameState_ObjectDirection_Name(enum_t_value);
  }
  static inline bool ObjectDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ObjectDirection* value) {
    return GameState_ObjectDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIsClosestObstacleBoxFieldNumber = 1,
    kCoinsNeededFieldNumber = 2,
    kClosestObstacleFieldNumber = 3,
    kClosestCoinFieldNumber = 4,
    kClosestEnemyFieldNumber = 5,
    kFinishDirectionFieldNumber = 6,
    kRewardFieldNumber = 7,
    kClockTimeFieldNumber = 8,
  };
  // bool isClosestObstacleBox = 1;
  void clear_isclosestobstaclebox();
  bool isclosestobstaclebox() const;
  void set_isclosestobstaclebox(bool value);
  private:
  bool _internal_isclosestobstaclebox() const;
  void _internal_set_isclosestobstaclebox(bool value);
  public:

  // int32 coinsNeeded = 2;
  void clear_coinsneeded();
  int32_t coinsneeded() const;
  void set_coinsneeded(int32_t value);
  private:
  int32_t _internal_coinsneeded() const;
  void _internal_set_coinsneeded(int32_t value);
  public:

  // .GameMessage.GameState.ObjectDirection closestObstacle = 3;
  void clear_closestobstacle();
  ::GameMessage::GameState_ObjectDirection closestobstacle() const;
  void set_closestobstacle(::GameMessage::GameState_ObjectDirection value);
  private:
  ::GameMessage::GameState_ObjectDirection _internal_closestobstacle() const;
  void _internal_set_closestobstacle(::GameMessage::GameState_ObjectDirection value);
  public:

  // .GameMessage.GameState.ObjectDirection closestCoin = 4;
  void clear_closestcoin();
  ::GameMessage::GameState_ObjectDirection closestcoin() const;
  void set_closestcoin(::GameMessage::GameState_ObjectDirection value);
  private:
  ::GameMessage::GameState_ObjectDirection _internal_closestcoin() const;
  void _internal_set_closestcoin(::GameMessage::GameState_ObjectDirection value);
  public:

  // .GameMessage.GameState.ObjectDirection closestEnemy = 5;
  void clear_closestenemy();
  ::GameMessage::GameState_ObjectDirection closestenemy() const;
  void set_closestenemy(::GameMessage::GameState_ObjectDirection value);
  private:
  ::GameMessage::GameState_ObjectDirection _internal_closestenemy() const;
  void _internal_set_closestenemy(::GameMessage::GameState_ObjectDirection value);
  public:

  // .GameMessage.GameState.ObjectDirection finishDirection = 6;
  void clear_finishdirection();
  ::GameMessage::GameState_ObjectDirection finishdirection() const;
  void set_finishdirection(::GameMessage::GameState_ObjectDirection value);
  private:
  ::GameMessage::GameState_ObjectDirection _internal_finishdirection() const;
  void _internal_set_finishdirection(::GameMessage::GameState_ObjectDirection value);
  public:

  // int32 reward = 7;
  void clear_reward();
  int32_t reward() const;
  void set_reward(int32_t value);
  private:
  int32_t _internal_reward() const;
  void _internal_set_reward(int32_t value);
  public:

  // int32 clockTime = 8;
  void clear_clocktime();
  int32_t clocktime() const;
  void set_clocktime(int32_t value);
  private:
  int32_t _internal_clocktime() const;
  void _internal_set_clocktime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GameMessage.GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isclosestobstaclebox_;
  int32_t coinsneeded_;
  int closestobstacle_;
  int closestcoin_;
  int closestenemy_;
  int finishdirection_;
  int32_t reward_;
  int32_t clocktime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameMessage.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameMessage.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Action_ActionDirection ActionDirection;
  static constexpr ActionDirection DEFAULT =
    Action_ActionDirection_DEFAULT;
  static constexpr ActionDirection UP =
    Action_ActionDirection_UP;
  static constexpr ActionDirection RIGHT =
    Action_ActionDirection_RIGHT;
  static constexpr ActionDirection DOWN =
    Action_ActionDirection_DOWN;
  static constexpr ActionDirection LEFT =
    Action_ActionDirection_LEFT;
  static constexpr ActionDirection IDLE =
    Action_ActionDirection_IDLE;
  static inline bool ActionDirection_IsValid(int value) {
    return Action_ActionDirection_IsValid(value);
  }
  static constexpr ActionDirection ActionDirection_MIN =
    Action_ActionDirection_ActionDirection_MIN;
  static constexpr ActionDirection ActionDirection_MAX =
    Action_ActionDirection_ActionDirection_MAX;
  static constexpr int ActionDirection_ARRAYSIZE =
    Action_ActionDirection_ActionDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionDirection_descriptor() {
    return Action_ActionDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionDirection_Name.");
    return Action_ActionDirection_Name(enum_t_value);
  }
  static inline bool ActionDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionDirection* value) {
    return Action_ActionDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMoveDirectionFieldNumber = 1,
    kShotDirectionFieldNumber = 2,
    kSetResetFieldNumber = 3,
  };
  // .GameMessage.Action.ActionDirection moveDirection = 1;
  void clear_movedirection();
  ::GameMessage::Action_ActionDirection movedirection() const;
  void set_movedirection(::GameMessage::Action_ActionDirection value);
  private:
  ::GameMessage::Action_ActionDirection _internal_movedirection() const;
  void _internal_set_movedirection(::GameMessage::Action_ActionDirection value);
  public:

  // .GameMessage.Action.ActionDirection shotDirection = 2;
  void clear_shotdirection();
  ::GameMessage::Action_ActionDirection shotdirection() const;
  void set_shotdirection(::GameMessage::Action_ActionDirection value);
  private:
  ::GameMessage::Action_ActionDirection _internal_shotdirection() const;
  void _internal_set_shotdirection(::GameMessage::Action_ActionDirection value);
  public:

  // bool setReset = 3;
  void clear_setreset();
  bool setreset() const;
  void set_setreset(bool value);
  private:
  bool _internal_setreset() const;
  void _internal_set_setreset(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GameMessage.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int movedirection_;
  int shotdirection_;
  bool setreset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameState

// bool isClosestObstacleBox = 1;
inline void GameState::clear_isclosestobstaclebox() {
  isclosestobstaclebox_ = false;
}
inline bool GameState::_internal_isclosestobstaclebox() const {
  return isclosestobstaclebox_;
}
inline bool GameState::isclosestobstaclebox() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.isClosestObstacleBox)
  return _internal_isclosestobstaclebox();
}
inline void GameState::_internal_set_isclosestobstaclebox(bool value) {
  
  isclosestobstaclebox_ = value;
}
inline void GameState::set_isclosestobstaclebox(bool value) {
  _internal_set_isclosestobstaclebox(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.isClosestObstacleBox)
}

// int32 coinsNeeded = 2;
inline void GameState::clear_coinsneeded() {
  coinsneeded_ = 0;
}
inline int32_t GameState::_internal_coinsneeded() const {
  return coinsneeded_;
}
inline int32_t GameState::coinsneeded() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.coinsNeeded)
  return _internal_coinsneeded();
}
inline void GameState::_internal_set_coinsneeded(int32_t value) {
  
  coinsneeded_ = value;
}
inline void GameState::set_coinsneeded(int32_t value) {
  _internal_set_coinsneeded(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.coinsNeeded)
}

// .GameMessage.GameState.ObjectDirection closestObstacle = 3;
inline void GameState::clear_closestobstacle() {
  closestobstacle_ = 0;
}
inline ::GameMessage::GameState_ObjectDirection GameState::_internal_closestobstacle() const {
  return static_cast< ::GameMessage::GameState_ObjectDirection >(closestobstacle_);
}
inline ::GameMessage::GameState_ObjectDirection GameState::closestobstacle() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.closestObstacle)
  return _internal_closestobstacle();
}
inline void GameState::_internal_set_closestobstacle(::GameMessage::GameState_ObjectDirection value) {
  
  closestobstacle_ = value;
}
inline void GameState::set_closestobstacle(::GameMessage::GameState_ObjectDirection value) {
  _internal_set_closestobstacle(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.closestObstacle)
}

// .GameMessage.GameState.ObjectDirection closestCoin = 4;
inline void GameState::clear_closestcoin() {
  closestcoin_ = 0;
}
inline ::GameMessage::GameState_ObjectDirection GameState::_internal_closestcoin() const {
  return static_cast< ::GameMessage::GameState_ObjectDirection >(closestcoin_);
}
inline ::GameMessage::GameState_ObjectDirection GameState::closestcoin() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.closestCoin)
  return _internal_closestcoin();
}
inline void GameState::_internal_set_closestcoin(::GameMessage::GameState_ObjectDirection value) {
  
  closestcoin_ = value;
}
inline void GameState::set_closestcoin(::GameMessage::GameState_ObjectDirection value) {
  _internal_set_closestcoin(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.closestCoin)
}

// .GameMessage.GameState.ObjectDirection closestEnemy = 5;
inline void GameState::clear_closestenemy() {
  closestenemy_ = 0;
}
inline ::GameMessage::GameState_ObjectDirection GameState::_internal_closestenemy() const {
  return static_cast< ::GameMessage::GameState_ObjectDirection >(closestenemy_);
}
inline ::GameMessage::GameState_ObjectDirection GameState::closestenemy() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.closestEnemy)
  return _internal_closestenemy();
}
inline void GameState::_internal_set_closestenemy(::GameMessage::GameState_ObjectDirection value) {
  
  closestenemy_ = value;
}
inline void GameState::set_closestenemy(::GameMessage::GameState_ObjectDirection value) {
  _internal_set_closestenemy(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.closestEnemy)
}

// .GameMessage.GameState.ObjectDirection finishDirection = 6;
inline void GameState::clear_finishdirection() {
  finishdirection_ = 0;
}
inline ::GameMessage::GameState_ObjectDirection GameState::_internal_finishdirection() const {
  return static_cast< ::GameMessage::GameState_ObjectDirection >(finishdirection_);
}
inline ::GameMessage::GameState_ObjectDirection GameState::finishdirection() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.finishDirection)
  return _internal_finishdirection();
}
inline void GameState::_internal_set_finishdirection(::GameMessage::GameState_ObjectDirection value) {
  
  finishdirection_ = value;
}
inline void GameState::set_finishdirection(::GameMessage::GameState_ObjectDirection value) {
  _internal_set_finishdirection(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.finishDirection)
}

// int32 reward = 7;
inline void GameState::clear_reward() {
  reward_ = 0;
}
inline int32_t GameState::_internal_reward() const {
  return reward_;
}
inline int32_t GameState::reward() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.reward)
  return _internal_reward();
}
inline void GameState::_internal_set_reward(int32_t value) {
  
  reward_ = value;
}
inline void GameState::set_reward(int32_t value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.reward)
}

// int32 clockTime = 8;
inline void GameState::clear_clocktime() {
  clocktime_ = 0;
}
inline int32_t GameState::_internal_clocktime() const {
  return clocktime_;
}
inline int32_t GameState::clocktime() const {
  // @@protoc_insertion_point(field_get:GameMessage.GameState.clockTime)
  return _internal_clocktime();
}
inline void GameState::_internal_set_clocktime(int32_t value) {
  
  clocktime_ = value;
}
inline void GameState::set_clocktime(int32_t value) {
  _internal_set_clocktime(value);
  // @@protoc_insertion_point(field_set:GameMessage.GameState.clockTime)
}

// -------------------------------------------------------------------

// Action

// .GameMessage.Action.ActionDirection moveDirection = 1;
inline void Action::clear_movedirection() {
  movedirection_ = 0;
}
inline ::GameMessage::Action_ActionDirection Action::_internal_movedirection() const {
  return static_cast< ::GameMessage::Action_ActionDirection >(movedirection_);
}
inline ::GameMessage::Action_ActionDirection Action::movedirection() const {
  // @@protoc_insertion_point(field_get:GameMessage.Action.moveDirection)
  return _internal_movedirection();
}
inline void Action::_internal_set_movedirection(::GameMessage::Action_ActionDirection value) {
  
  movedirection_ = value;
}
inline void Action::set_movedirection(::GameMessage::Action_ActionDirection value) {
  _internal_set_movedirection(value);
  // @@protoc_insertion_point(field_set:GameMessage.Action.moveDirection)
}

// .GameMessage.Action.ActionDirection shotDirection = 2;
inline void Action::clear_shotdirection() {
  shotdirection_ = 0;
}
inline ::GameMessage::Action_ActionDirection Action::_internal_shotdirection() const {
  return static_cast< ::GameMessage::Action_ActionDirection >(shotdirection_);
}
inline ::GameMessage::Action_ActionDirection Action::shotdirection() const {
  // @@protoc_insertion_point(field_get:GameMessage.Action.shotDirection)
  return _internal_shotdirection();
}
inline void Action::_internal_set_shotdirection(::GameMessage::Action_ActionDirection value) {
  
  shotdirection_ = value;
}
inline void Action::set_shotdirection(::GameMessage::Action_ActionDirection value) {
  _internal_set_shotdirection(value);
  // @@protoc_insertion_point(field_set:GameMessage.Action.shotDirection)
}

// bool setReset = 3;
inline void Action::clear_setreset() {
  setreset_ = false;
}
inline bool Action::_internal_setreset() const {
  return setreset_;
}
inline bool Action::setreset() const {
  // @@protoc_insertion_point(field_get:GameMessage.Action.setReset)
  return _internal_setreset();
}
inline void Action::_internal_set_setreset(bool value) {
  
  setreset_ = value;
}
inline void Action::set_setreset(bool value) {
  _internal_set_setreset(value);
  // @@protoc_insertion_point(field_set:GameMessage.Action.setReset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameMessage::GameState_ObjectDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::GameState_ObjectDirection>() {
  return ::GameMessage::GameState_ObjectDirection_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::Action_ActionDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::Action_ActionDirection>() {
  return ::GameMessage::Action_ActionDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
