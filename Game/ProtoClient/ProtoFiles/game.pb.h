// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
namespace GameMessage {
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Reset;
struct ResetDefaultTypeInternal;
extern ResetDefaultTypeInternal _Reset_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace GameMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::GameMessage::Action* Arena::CreateMaybeMessage<::GameMessage::Action>(Arena*);
template<> ::GameMessage::Reset* Arena::CreateMaybeMessage<::GameMessage::Reset>(Arena*);
template<> ::GameMessage::State* Arena::CreateMaybeMessage<::GameMessage::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GameMessage {

enum Action_ActionDirection : int {
  Action_ActionDirection_IDLE = 0,
  Action_ActionDirection_UP = 1,
  Action_ActionDirection_RIGHT = 2,
  Action_ActionDirection_DOWN = 3,
  Action_ActionDirection_LEFT = 4,
  Action_ActionDirection_Action_ActionDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Action_ActionDirection_Action_ActionDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Action_ActionDirection_IsValid(int value);
constexpr Action_ActionDirection Action_ActionDirection_ActionDirection_MIN = Action_ActionDirection_IDLE;
constexpr Action_ActionDirection Action_ActionDirection_ActionDirection_MAX = Action_ActionDirection_LEFT;
constexpr int Action_ActionDirection_ActionDirection_ARRAYSIZE = Action_ActionDirection_ActionDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_ActionDirection_descriptor();
template<typename T>
inline const std::string& Action_ActionDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action_ActionDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_ActionDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_ActionDirection_descriptor(), enum_t_value);
}
inline bool Action_ActionDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Action_ActionDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action_ActionDirection>(
    Action_ActionDirection_descriptor(), name, value);
}
// ===================================================================

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameMessage.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameMessage.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapMatrixFieldNumber = 4,
    kRewardFieldNumber = 9,
    kStepsCountFieldNumber = 10,
    kGameOverFieldNumber = 11,
    kEpisodeCountFieldNumber = 12,
  };
  // string mapMatrix = 4;
  void clear_mapmatrix();
  const std::string& mapmatrix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapmatrix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapmatrix();
  PROTOBUF_NODISCARD std::string* release_mapmatrix();
  void set_allocated_mapmatrix(std::string* mapmatrix);
  private:
  const std::string& _internal_mapmatrix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapmatrix(const std::string& value);
  std::string* _internal_mutable_mapmatrix();
  public:

  // int32 reward = 9;
  void clear_reward();
  int32_t reward() const;
  void set_reward(int32_t value);
  private:
  int32_t _internal_reward() const;
  void _internal_set_reward(int32_t value);
  public:

  // int32 stepsCount = 10;
  void clear_stepscount();
  int32_t stepscount() const;
  void set_stepscount(int32_t value);
  private:
  int32_t _internal_stepscount() const;
  void _internal_set_stepscount(int32_t value);
  public:

  // bool gameOver = 11;
  void clear_gameover();
  bool gameover() const;
  void set_gameover(bool value);
  private:
  bool _internal_gameover() const;
  void _internal_set_gameover(bool value);
  public:

  // int32 episodeCount = 12;
  void clear_episodecount();
  int32_t episodecount() const;
  void set_episodecount(int32_t value);
  private:
  int32_t _internal_episodecount() const;
  void _internal_set_episodecount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GameMessage.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapmatrix_;
  int32_t reward_;
  int32_t stepscount_;
  bool gameover_;
  int32_t episodecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameMessage.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameMessage.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Action_ActionDirection ActionDirection;
  static constexpr ActionDirection IDLE =
    Action_ActionDirection_IDLE;
  static constexpr ActionDirection UP =
    Action_ActionDirection_UP;
  static constexpr ActionDirection RIGHT =
    Action_ActionDirection_RIGHT;
  static constexpr ActionDirection DOWN =
    Action_ActionDirection_DOWN;
  static constexpr ActionDirection LEFT =
    Action_ActionDirection_LEFT;
  static inline bool ActionDirection_IsValid(int value) {
    return Action_ActionDirection_IsValid(value);
  }
  static constexpr ActionDirection ActionDirection_MIN =
    Action_ActionDirection_ActionDirection_MIN;
  static constexpr ActionDirection ActionDirection_MAX =
    Action_ActionDirection_ActionDirection_MAX;
  static constexpr int ActionDirection_ARRAYSIZE =
    Action_ActionDirection_ActionDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionDirection_descriptor() {
    return Action_ActionDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionDirection_Name.");
    return Action_ActionDirection_Name(enum_t_value);
  }
  static inline bool ActionDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionDirection* value) {
    return Action_ActionDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMoveDirectionFieldNumber = 1,
    kShotDirectionFieldNumber = 2,
  };
  // .GameMessage.Action.ActionDirection moveDirection = 1;
  void clear_movedirection();
  ::GameMessage::Action_ActionDirection movedirection() const;
  void set_movedirection(::GameMessage::Action_ActionDirection value);
  private:
  ::GameMessage::Action_ActionDirection _internal_movedirection() const;
  void _internal_set_movedirection(::GameMessage::Action_ActionDirection value);
  public:

  // .GameMessage.Action.ActionDirection shotDirection = 2;
  void clear_shotdirection();
  ::GameMessage::Action_ActionDirection shotdirection() const;
  void set_shotdirection(::GameMessage::Action_ActionDirection value);
  private:
  ::GameMessage::Action_ActionDirection _internal_shotdirection() const;
  void _internal_set_shotdirection(::GameMessage::Action_ActionDirection value);
  public:

  // @@protoc_insertion_point(class_scope:GameMessage.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int movedirection_;
  int shotdirection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Reset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameMessage.Reset) */ {
 public:
  inline Reset() : Reset(nullptr) {}
  ~Reset() override;
  explicit constexpr Reset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reset(const Reset& from);
  Reset(Reset&& from) noexcept
    : Reset() {
    *this = ::std::move(from);
  }

  inline Reset& operator=(const Reset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reset& operator=(Reset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reset* internal_default_instance() {
    return reinterpret_cast<const Reset*>(
               &_Reset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Reset& a, Reset& b) {
    a.Swap(&b);
  }
  inline void Swap(Reset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Reset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameMessage.Reset";
  }
  protected:
  explicit Reset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResetNeededFieldNumber = 1,
  };
  // bool resetNeeded = 1;
  void clear_resetneeded();
  bool resetneeded() const;
  void set_resetneeded(bool value);
  private:
  bool _internal_resetneeded() const;
  void _internal_set_resetneeded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GameMessage.Reset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool resetneeded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// string mapMatrix = 4;
inline void State::clear_mapmatrix() {
  mapmatrix_.ClearToEmpty();
}
inline const std::string& State::mapmatrix() const {
  // @@protoc_insertion_point(field_get:GameMessage.State.mapMatrix)
  return _internal_mapmatrix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_mapmatrix(ArgT0&& arg0, ArgT... args) {
 
 mapmatrix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameMessage.State.mapMatrix)
}
inline std::string* State::mutable_mapmatrix() {
  std::string* _s = _internal_mutable_mapmatrix();
  // @@protoc_insertion_point(field_mutable:GameMessage.State.mapMatrix)
  return _s;
}
inline const std::string& State::_internal_mapmatrix() const {
  return mapmatrix_.Get();
}
inline void State::_internal_set_mapmatrix(const std::string& value) {
  
  mapmatrix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_mapmatrix() {
  
  return mapmatrix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State::release_mapmatrix() {
  // @@protoc_insertion_point(field_release:GameMessage.State.mapMatrix)
  return mapmatrix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State::set_allocated_mapmatrix(std::string* mapmatrix) {
  if (mapmatrix != nullptr) {
    
  } else {
    
  }
  mapmatrix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapmatrix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapmatrix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapmatrix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameMessage.State.mapMatrix)
}

// int32 reward = 9;
inline void State::clear_reward() {
  reward_ = 0;
}
inline int32_t State::_internal_reward() const {
  return reward_;
}
inline int32_t State::reward() const {
  // @@protoc_insertion_point(field_get:GameMessage.State.reward)
  return _internal_reward();
}
inline void State::_internal_set_reward(int32_t value) {
  
  reward_ = value;
}
inline void State::set_reward(int32_t value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:GameMessage.State.reward)
}

// int32 stepsCount = 10;
inline void State::clear_stepscount() {
  stepscount_ = 0;
}
inline int32_t State::_internal_stepscount() const {
  return stepscount_;
}
inline int32_t State::stepscount() const {
  // @@protoc_insertion_point(field_get:GameMessage.State.stepsCount)
  return _internal_stepscount();
}
inline void State::_internal_set_stepscount(int32_t value) {
  
  stepscount_ = value;
}
inline void State::set_stepscount(int32_t value) {
  _internal_set_stepscount(value);
  // @@protoc_insertion_point(field_set:GameMessage.State.stepsCount)
}

// bool gameOver = 11;
inline void State::clear_gameover() {
  gameover_ = false;
}
inline bool State::_internal_gameover() const {
  return gameover_;
}
inline bool State::gameover() const {
  // @@protoc_insertion_point(field_get:GameMessage.State.gameOver)
  return _internal_gameover();
}
inline void State::_internal_set_gameover(bool value) {
  
  gameover_ = value;
}
inline void State::set_gameover(bool value) {
  _internal_set_gameover(value);
  // @@protoc_insertion_point(field_set:GameMessage.State.gameOver)
}

// int32 episodeCount = 12;
inline void State::clear_episodecount() {
  episodecount_ = 0;
}
inline int32_t State::_internal_episodecount() const {
  return episodecount_;
}
inline int32_t State::episodecount() const {
  // @@protoc_insertion_point(field_get:GameMessage.State.episodeCount)
  return _internal_episodecount();
}
inline void State::_internal_set_episodecount(int32_t value) {
  
  episodecount_ = value;
}
inline void State::set_episodecount(int32_t value) {
  _internal_set_episodecount(value);
  // @@protoc_insertion_point(field_set:GameMessage.State.episodeCount)
}

// -------------------------------------------------------------------

// Action

// .GameMessage.Action.ActionDirection moveDirection = 1;
inline void Action::clear_movedirection() {
  movedirection_ = 0;
}
inline ::GameMessage::Action_ActionDirection Action::_internal_movedirection() const {
  return static_cast< ::GameMessage::Action_ActionDirection >(movedirection_);
}
inline ::GameMessage::Action_ActionDirection Action::movedirection() const {
  // @@protoc_insertion_point(field_get:GameMessage.Action.moveDirection)
  return _internal_movedirection();
}
inline void Action::_internal_set_movedirection(::GameMessage::Action_ActionDirection value) {
  
  movedirection_ = value;
}
inline void Action::set_movedirection(::GameMessage::Action_ActionDirection value) {
  _internal_set_movedirection(value);
  // @@protoc_insertion_point(field_set:GameMessage.Action.moveDirection)
}

// .GameMessage.Action.ActionDirection shotDirection = 2;
inline void Action::clear_shotdirection() {
  shotdirection_ = 0;
}
inline ::GameMessage::Action_ActionDirection Action::_internal_shotdirection() const {
  return static_cast< ::GameMessage::Action_ActionDirection >(shotdirection_);
}
inline ::GameMessage::Action_ActionDirection Action::shotdirection() const {
  // @@protoc_insertion_point(field_get:GameMessage.Action.shotDirection)
  return _internal_shotdirection();
}
inline void Action::_internal_set_shotdirection(::GameMessage::Action_ActionDirection value) {
  
  shotdirection_ = value;
}
inline void Action::set_shotdirection(::GameMessage::Action_ActionDirection value) {
  _internal_set_shotdirection(value);
  // @@protoc_insertion_point(field_set:GameMessage.Action.shotDirection)
}

// -------------------------------------------------------------------

// Reset

// bool resetNeeded = 1;
inline void Reset::clear_resetneeded() {
  resetneeded_ = false;
}
inline bool Reset::_internal_resetneeded() const {
  return resetneeded_;
}
inline bool Reset::resetneeded() const {
  // @@protoc_insertion_point(field_get:GameMessage.Reset.resetNeeded)
  return _internal_resetneeded();
}
inline void Reset::_internal_set_resetneeded(bool value) {
  
  resetneeded_ = value;
}
inline void Reset::set_resetneeded(bool value) {
  _internal_set_resetneeded(value);
  // @@protoc_insertion_point(field_set:GameMessage.Reset.resetNeeded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameMessage::Action_ActionDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::Action_ActionDirection>() {
  return ::GameMessage::Action_ActionDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
