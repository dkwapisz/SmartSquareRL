// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace Test {
class LevelInfoReply;
struct LevelInfoReplyDefaultTypeInternal;
extern LevelInfoReplyDefaultTypeInternal _LevelInfoReply_default_instance_;
class LevelInfoRequest;
struct LevelInfoRequestDefaultTypeInternal;
extern LevelInfoRequestDefaultTypeInternal _LevelInfoRequest_default_instance_;
}  // namespace Test
PROTOBUF_NAMESPACE_OPEN
template<> ::Test::LevelInfoReply* Arena::CreateMaybeMessage<::Test::LevelInfoReply>(Arena*);
template<> ::Test::LevelInfoRequest* Arena::CreateMaybeMessage<::Test::LevelInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Test {

// ===================================================================

class LevelInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Test.LevelInfoRequest) */ {
 public:
  inline LevelInfoRequest() : LevelInfoRequest(nullptr) {}
  ~LevelInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR LevelInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelInfoRequest(const LevelInfoRequest& from);
  LevelInfoRequest(LevelInfoRequest&& from) noexcept
    : LevelInfoRequest() {
    *this = ::std::move(from);
  }

  inline LevelInfoRequest& operator=(const LevelInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelInfoRequest& operator=(LevelInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LevelInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelInfoRequest* internal_default_instance() {
    return reinterpret_cast<const LevelInfoRequest*>(
               &_LevelInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LevelInfoRequest& a, LevelInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LevelInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LevelInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LevelInfoRequest& from) {
    LevelInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Test.LevelInfoRequest";
  }
  protected:
  explicit LevelInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCoinsFieldNumber = 1,
    kLevelCoinsFieldNumber = 2,
  };
  // int32 playerCoins = 1;
  void clear_playercoins();
  int32_t playercoins() const;
  void set_playercoins(int32_t value);
  private:
  int32_t _internal_playercoins() const;
  void _internal_set_playercoins(int32_t value);
  public:

  // int32 levelCoins = 2;
  void clear_levelcoins();
  int32_t levelcoins() const;
  void set_levelcoins(int32_t value);
  private:
  int32_t _internal_levelcoins() const;
  void _internal_set_levelcoins(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Test.LevelInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playercoins_;
    int32_t levelcoins_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class LevelInfoReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Test.LevelInfoReply) */ {
 public:
  inline LevelInfoReply() : LevelInfoReply(nullptr) {}
  ~LevelInfoReply() override;
  explicit PROTOBUF_CONSTEXPR LevelInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelInfoReply(const LevelInfoReply& from);
  LevelInfoReply(LevelInfoReply&& from) noexcept
    : LevelInfoReply() {
    *this = ::std::move(from);
  }

  inline LevelInfoReply& operator=(const LevelInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelInfoReply& operator=(LevelInfoReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LevelInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelInfoReply* internal_default_instance() {
    return reinterpret_cast<const LevelInfoReply*>(
               &_LevelInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LevelInfoReply& a, LevelInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LevelInfoReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelInfoReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LevelInfoReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LevelInfoReply& from) {
    LevelInfoReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelInfoReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Test.LevelInfoReply";
  }
  protected:
  explicit LevelInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCoinsFieldNumber = 1,
    kLevelCoinsFieldNumber = 2,
  };
  // int32 playerCoins = 1;
  void clear_playercoins();
  int32_t playercoins() const;
  void set_playercoins(int32_t value);
  private:
  int32_t _internal_playercoins() const;
  void _internal_set_playercoins(int32_t value);
  public:

  // int32 levelCoins = 2;
  void clear_levelcoins();
  int32_t levelcoins() const;
  void set_levelcoins(int32_t value);
  private:
  int32_t _internal_levelcoins() const;
  void _internal_set_levelcoins(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Test.LevelInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playercoins_;
    int32_t levelcoins_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LevelInfoRequest

// int32 playerCoins = 1;
inline void LevelInfoRequest::clear_playercoins() {
  _impl_.playercoins_ = 0;
}
inline int32_t LevelInfoRequest::_internal_playercoins() const {
  return _impl_.playercoins_;
}
inline int32_t LevelInfoRequest::playercoins() const {
  // @@protoc_insertion_point(field_get:Test.LevelInfoRequest.playerCoins)
  return _internal_playercoins();
}
inline void LevelInfoRequest::_internal_set_playercoins(int32_t value) {
  
  _impl_.playercoins_ = value;
}
inline void LevelInfoRequest::set_playercoins(int32_t value) {
  _internal_set_playercoins(value);
  // @@protoc_insertion_point(field_set:Test.LevelInfoRequest.playerCoins)
}

// int32 levelCoins = 2;
inline void LevelInfoRequest::clear_levelcoins() {
  _impl_.levelcoins_ = 0;
}
inline int32_t LevelInfoRequest::_internal_levelcoins() const {
  return _impl_.levelcoins_;
}
inline int32_t LevelInfoRequest::levelcoins() const {
  // @@protoc_insertion_point(field_get:Test.LevelInfoRequest.levelCoins)
  return _internal_levelcoins();
}
inline void LevelInfoRequest::_internal_set_levelcoins(int32_t value) {
  
  _impl_.levelcoins_ = value;
}
inline void LevelInfoRequest::set_levelcoins(int32_t value) {
  _internal_set_levelcoins(value);
  // @@protoc_insertion_point(field_set:Test.LevelInfoRequest.levelCoins)
}

// -------------------------------------------------------------------

// LevelInfoReply

// int32 playerCoins = 1;
inline void LevelInfoReply::clear_playercoins() {
  _impl_.playercoins_ = 0;
}
inline int32_t LevelInfoReply::_internal_playercoins() const {
  return _impl_.playercoins_;
}
inline int32_t LevelInfoReply::playercoins() const {
  // @@protoc_insertion_point(field_get:Test.LevelInfoReply.playerCoins)
  return _internal_playercoins();
}
inline void LevelInfoReply::_internal_set_playercoins(int32_t value) {
  
  _impl_.playercoins_ = value;
}
inline void LevelInfoReply::set_playercoins(int32_t value) {
  _internal_set_playercoins(value);
  // @@protoc_insertion_point(field_set:Test.LevelInfoReply.playerCoins)
}

// int32 levelCoins = 2;
inline void LevelInfoReply::clear_levelcoins() {
  _impl_.levelcoins_ = 0;
}
inline int32_t LevelInfoReply::_internal_levelcoins() const {
  return _impl_.levelcoins_;
}
inline int32_t LevelInfoReply::levelcoins() const {
  // @@protoc_insertion_point(field_get:Test.LevelInfoReply.levelCoins)
  return _internal_levelcoins();
}
inline void LevelInfoReply::_internal_set_levelcoins(int32_t value) {
  
  _impl_.levelcoins_ = value;
}
inline void LevelInfoReply::set_levelcoins(int32_t value) {
  _internal_set_levelcoins(value);
  // @@protoc_insertion_point(field_set:Test.LevelInfoReply.levelCoins)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
